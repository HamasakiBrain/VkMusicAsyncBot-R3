from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import MessageNotModified, BotBlocked, InvalidQueryID
from objects.globals import dispatcher, logger, config, CompleteCache, bot
from objects import globals

import json
from aiohttp import ClientSession

chat_id_channel = config["channel_chat_id"]
bot_token = config["telegram_token"]

@dispatcher.message_handler(commands="start")
async def start_command(message: Message):
    globals.add_usage_stats()
    try:
        data: list = message.text.split()
        # if len(data) > 1: await database.create_user(message.from_user.id, data[1])
        # else: await database.create_user(message.from_user.id)

        if len(data) > 1: await CompleteCache.create_user(message.from_user.id, data[1])
        else: await CompleteCache.create_user(message.from_user.id)

        """
        if globals.config["status_obyaz"] == True:
            check_url = f"https://api.telegram.org/bot{bot_token}/getChatMember?chat_id={chat_id_channel}&user_id={message.from_user.id}"
            async with ClientSession() as session:
                res = await session.get(check_url)
                res = json.loads(await res.text())
        
            if res["result"]["status"] == "member" or res["result"]["status"] == "creator":
        """
        markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        markup.add(KeyboardButton("üéôÔ∏è –¢–æ–ø"), KeyboardButton("üéµ –ù–æ–≤–∏–Ω–∫–∏"),
                KeyboardButton("üéß –í–ö"), KeyboardButton("üîç –ü–æ–∏—Å–∫"))

        if message.from_user.id in config["admins_telegram_ids"]:
            markup.add(KeyboardButton("üëç–ü–æ–ª–µ–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"), KeyboardButton("üî• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        else: markup.add(KeyboardButton("üëç–ü–æ–ª–µ–∑–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"))

        await message.answer(
                "–ü–æ–∏—Å–∫ –ø–µ—Å–µ–Ω - /search\n"
                "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–µ—Å–Ω–∏ - /top\n"
                "–ù–æ–≤—ã–µ –ø–µ—Å–Ω–∏ - /new\n"
                "–ú—É–∑—ã–∫–∞ –∏–∑ –í–ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã - /vk\n\n"
                "–ú–æ–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ - /mymusic\n"
                "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –í–û–°–ü–û–õ–¨–ó–£–ô–¢–ï–°–¨ –Ω–∞—à–∏–º –º–µ–Ω—é:"
                "[¬†](https://telegra.ph/file/e21fb04bef6c4e0b6bddf.jpg)",
                reply_markup=markup,
                reply=True
        )

        """
            elif res["result"]["status"] == "left":
                check_sub = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!‚úÖ", callback_data=f"check-sub_{message.from_user.id}")]
                    ]
                )

                await message.answer(
                        f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª [–°–ù–ì —Å–µ–≥–æ–¥–Ω—è | –ì–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ](https://t.me/today_sng), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π –º—É–∑—ã–∫–µ!‚úåÔ∏èüî•",
                        reply_markup=check_sub
                        )
        else:
            markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            markup.add(KeyboardButton("üéôÔ∏è –¢–æ–ø"), KeyboardButton("üéµ –ù–æ–≤–∏–Ω–∫–∏"),
                    KeyboardButton("üéß –í–ö"), KeyboardButton("üîç –ü–æ–∏—Å–∫"))

            if message.from_user.id in config["admins_telegram_ids"]:
                markup.add(KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton("üî• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
            else: markup.add(KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))

            await message.answer(
                    "–ü–æ–∏—Å–∫ –ø–µ—Å–µ–Ω - /search\n"
                    "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–µ—Å–Ω–∏ - /top\n"
                    "–ù–æ–≤—ã–µ –ø–µ—Å–Ω–∏ - /new\n"
                    "–ú—É–∑—ã–∫–∞ –∏–∑ –í–ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã - /vk\n\n"
                    "–ú–æ–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ - /mymusic\n"
                    "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –í–û–°–ü–û–õ–¨–ó–£–ô–¢–ï–°–¨ –Ω–∞—à–∏–º –º–µ–Ω—é:"
                    "[¬†](https://telegra.ph/file/e21fb04bef6c4e0b6bddf.jpg)",
                    reply_markup=markup,
                    reply=True)       
        """

    except (MessageNotModified, BotBlocked, InvalidQueryID): pass
    except Exception as e:
        logger.exception(e)

@dispatcher.callback_query_handler(lambda query: query.data.startswith(("check-sub")))
async def check_sub(query: CallbackQuery):
    user_id = query.data.split("_")[1]

    check_url = f"https://api.telegram.org/bot{bot_token}/getChatMember?chat_id={chat_id_channel}&user_id={user_id}"

    async with ClientSession() as session:
        res = await session.get(check_url)
        res = json.loads(await res.text())

    if res["result"]["status"] == "member" or res["result"]["status"] == "creator":
        await bot.send_message(
                query.message.chat.id,
                text="–°—É–ø–µ—Ä! –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π –º—É–∑—ã–∫–µ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!üî•"
                )

    elif res["result"]["status"] == "left":
        await bot.send_message(
                query.message.chat.id,
                text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                )