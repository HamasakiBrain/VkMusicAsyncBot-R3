from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import MessageNotModified, BotBlocked, InvalidQueryID
from objects.globals import dispatcher, logger, musicapi, config
from objects import globals
from modules import database
from modules.utils import convert_from_seconds, paginate
from gifs import gifs
import random

chat_id_channel = config["channel_chat_id"]
bot_token = config["telegram_token"]

@dispatcher.message_handler(lambda message: message.text == "üîç –ü–æ–∏—Å–∫")
async def search_command(message: Message):
    globals.add_usage_stats()
    try:
        await database.create_user(message.from_user.id)

        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(InlineKeyboardButton("üéß –ú–æ–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏", callback_data="my_audio_show"))

        #await message.reply("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", reply_markup=markup, reply=True)    
        await message.answer_video(random.choice(gifs.gifs), caption="üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", reply_markup=markup, reply=True)      

    except (MessageNotModified, BotBlocked, InvalidQueryID): pass
    except Exception as e:
        logger.exception(e)

@dispatcher.message_handler()
async def search(message: Message):
    globals.add_usage_stats()
    try:
        await database.create_user(message.from_user.id)

        globals.cache_user_page(message.from_user.id, "search_back_0")
        globals.cache_user_search(message.from_user.id, message.text)

        try:
            data = list(paginate((await musicapi.search(message.text))["list"], globals.config["tracks_on_page"]))
        except TypeError: data = []

        if len(data) == 0:
            await message.reply("–ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
            return
        else:
            data = data[0]

        tracks: list = []
        for track in data:
            await database.create_audio(track["owner_id"], track["audio_id"], track["artist"], track["title"], track["duration"])
            tracks.append(track)

        if len(tracks) == 0:
            await message.reply("–ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.", reply=True)
            return

        markup = InlineKeyboardMarkup(row_width=2)
        for track in tracks:
            markup.add(InlineKeyboardButton(f"{track['artist']} - {track['title']} ({convert_from_seconds(track['duration'])})",
                                            callback_data=f"audio_{track['owner_id']}_{track['audio_id']}"))

        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"search_back_0"),
                InlineKeyboardButton("‚û°Ô∏è", callback_data=f"search_next_2"))

        await message.reply("–¢—Ä–µ–∫–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É", reply_markup=markup, reply=True)

    except (MessageNotModified, BotBlocked, InvalidQueryID): pass
    except Exception as e:
        logger.exception(e)

@dispatcher.callback_query_handler(lambda query: query.data.startswith("search_next_"))
async def search_next(query: CallbackQuery):
    globals.add_usage_stats()
    try:
        await database.create_user(query.from_user.id)

        globals.cache_user_page(query.from_user.id, query.data)
        page = int(query.data.split("_")[-1])

        state = globals.get_user_state(query.from_user.id)
        if state is None: return

        if state["search"] is None:
            return await query.answer("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        data = list(paginate((await musicapi.search(state["search"]))["list"], globals.config["tracks_on_page"]))
        if page >= len(data):
            return await query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.")

        data = data[page]

        tracks: list = []
        for track in data:
            await database.create_audio(track["owner_id"], track["audio_id"], track["artist"], track["title"], track["duration"])
            tracks.append(track)

        if len(tracks) == 0:
            await query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.")
            return

        markup = InlineKeyboardMarkup(row_width=2)
        for track in tracks:
            markup.add(InlineKeyboardButton(f"{track['artist']} - {track['title']} ({convert_from_seconds(track['duration'])})",
                                            callback_data=f"audio_{track['owner_id']}_{track['audio_id']}"))

        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"search_back_{page - 1}"),
                   InlineKeyboardButton("‚û°Ô∏è", callback_data=f"search_next_{page + 1}"))

        await query.message.edit_reply_markup(reply_markup=markup)

    except (MessageNotModified, BotBlocked, InvalidQueryID): pass
    except Exception as e:
        logger.exception(e)

@dispatcher.callback_query_handler(lambda query: query.data.startswith("search_back_"))
async def search_back(query: CallbackQuery):
    globals.add_usage_stats()
    try:
        await database.create_user(query.from_user.id)

        globals.cache_user_page(query.from_user.id, query.data)
        page = int(query.data.split("_")[-1])

        if page == 0:
            await query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞.")
            return

        state = globals.get_user_state(query.from_user.id)
        if state is None: return
        try:
            data = list(paginate((await musicapi.search(state["search"]))["list"], globals.config["tracks_on_page"]))
        except TypeError: data = []
        
        if len(data) < page:
            return await query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞.")

        data = data[page]

        tracks: list = []
        for track in data:
            await database.create_audio(track["owner_id"], track["audio_id"], track["artist"], track["title"], track["duration"])
            tracks.append(track)

        if len(tracks) == 0:
            await query.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞.")
            return

        markup = InlineKeyboardMarkup(row_width=2)
        for track in tracks:
            markup.add(InlineKeyboardButton(f"{track['artist']} - {track['title']} ({convert_from_seconds(track['duration'])})",
                                            callback_data=f"audio_{track['owner_id']}_{track['audio_id']}"))

        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"search_back_{page - 1}"),
                   InlineKeyboardButton("‚û°Ô∏è", callback_data=f"search_next_{page + 1}"))

        await query.message.edit_reply_markup(reply_markup=markup)

    except (MessageNotModified, BotBlocked, InvalidQueryID): pass
    except Exception as e:
        logger.exception(e)